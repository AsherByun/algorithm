/*
next_permutation 알고리즘 사용
1. 맨뒤에서부터 앞으로 올라오면서 [i-1]<[i]인 지점을 찾음
2. 다시 뒤에서부터 [i-1]<[j] 인 지점을 찾음         (j=nums.length-1부터시작)
3. [i-1],[j] swap
4. i>j{i++,j--} 하면서 swap(i,j)      (j는 다시 맨뒤부터)
*/
import java.io.*;
import java.util.Arrays;
import java.util.*;
public class permutation {
    static StringBuilder sb=new StringBuilder();
	public static void main(String[] args) throws IOException {
    	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		int n=Integer.parseInt(br.readLine());
		int[] num=new int[n];
		for(int i=0;i<num.length;i++) {
			num[i]=i+1;
		}
		Arrays.sort(num);
		print(num);
		
		while(next_permutation(num));
		
		System.out.println(sb);
		
    }
    static boolean next_permutation(int list[]) {
    	int i=list.length-1;
    	while(i>0&&list[i-1]>=list[i])i--;
    	
    	if(i<=0)return false;
    	
    	int j=list.length-1;
    	while(list[i-1]>=list[j])j--;
    	
    	swap(i-1,j,list);
    	
    	j=list.length-1;
    	for(;i<j;i++,j--) {
    		swap(i,j,list);
    	}
    	print(list);
    	return true;
    }
    static void swap(int i,int j,int[] list) {
    	int temp=list[i];
    	list[i]=list[j];
    	list[j]=temp;
    }
   
    
    
    static void print(int[] arr) {
		
		for(int i=0;i<arr.length;i++) {
			sb.append(arr[i]+" ");
		}
		sb.append("\n");
		
	}
}
